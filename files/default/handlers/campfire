#!/usr/bin/env ruby
#
# Sensu Handler: campfire
#
# Copyright:: 2012, AJ Christensen <aj@junglist.gen.nz>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'sensu-handler'
require 'tinder'
require 'echelon_chef'

class Campfire < Sensu::Handler
  def incident_key
    @event['client']['name'] + '/' + @event['check']['name']
  end

  def campfire
    Tinder::Campfire.new(settings['campfire']['account'], ssl: true, token: settings['campfire']['token'])
  end

  def room
    campfire.find_room_by_name(settings['campfire']['room'])
  end

  # Pulled from "soon" to be released sensu-plugin gem changes
  def filter_repeated
    occurrences = @event['check']['occurrences'] || 1
    interval = @event['check']['interval'] || 30
    refresh = @event['check']['refresh'] || 1800
    if @event['occurrences'] < occurrences
      bail 'not enough occurrences'
    end
    if @event['occurrences'] > occurrences && @event['action'] == 'create'
      n = refresh.fdiv(interval).to_i
      bail 'only repeating alert every ' + n.to_s + ' occurrences' unless @event['occurrences'] % n == 0
    end
  end

  def handle
    filter_repeated
    echef = EchelonChef.new(settings['chef'])
    bail 'Campfire not currently configured' unless settings['campfire']
    bail 'Node not in valid environment' unless echef.correct_environment?
    description = @event['check']['notification'] || [ @event['client']['name'],
                                              @event['check']['name'],
                                              @event['check']['output'],
                                              @event['client']['address'],
                                            ].join(' : ')
    description = "RESOLVED - #{description}" if @event['action'] == 'resolve'
    begin
      timeout(3) do
        if room.speak("#{incident_key}: #{description}")
          puts 'campfire -- ' + @event['action'].capitalize + 'd incident -- ' + incident_key
        else
          puts 'campfire -- failed to ' + @event['action'] + ' incident -- ' + incident_key
        end
      end
    rescue Timeout::Error
      puts 'campfire -- timed out while attempting to ' + @event['action'] + ' a incident -- ' + incident_key
    end
  end
end
